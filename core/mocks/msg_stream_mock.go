// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	msgpb "github.com/milvus-io/milvus-proto/go-api/v2/msgpb"
	msgstream "github.com/milvus-io/milvus/pkg/mq/msgstream"
	mqwrapper "github.com/milvus-io/milvus/pkg/mq/msgstream/mqwrapper"
	mock "github.com/stretchr/testify/mock"
)

// MsgStream is an autogenerated mock type for the MsgStream type
type MsgStream struct {
	mock.Mock
}

type MsgStream_Expecter struct {
	mock *mock.Mock
}

func (_m *MsgStream) EXPECT() *MsgStream_Expecter {
	return &MsgStream_Expecter{mock: &_m.Mock}
}

// AsConsumer provides a mock function with given fields: channels, subName, position
func (_m *MsgStream) AsConsumer(channels []string, subName string, position mqwrapper.SubscriptionInitialPosition) {
	_m.Called(channels, subName, position)
}

// MsgStream_AsConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsConsumer'
type MsgStream_AsConsumer_Call struct {
	*mock.Call
}

// AsConsumer is a helper method to define mock.On call
//   - channels []string
//   - subName string
//   - position mqwrapper.SubscriptionInitialPosition
func (_e *MsgStream_Expecter) AsConsumer(channels interface{}, subName interface{}, position interface{}) *MsgStream_AsConsumer_Call {
	return &MsgStream_AsConsumer_Call{Call: _e.mock.On("AsConsumer", channels, subName, position)}
}

func (_c *MsgStream_AsConsumer_Call) Run(run func(channels []string, subName string, position mqwrapper.SubscriptionInitialPosition)) *MsgStream_AsConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(mqwrapper.SubscriptionInitialPosition))
	})
	return _c
}

func (_c *MsgStream_AsConsumer_Call) Return() *MsgStream_AsConsumer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_AsConsumer_Call) RunAndReturn(run func([]string, string, mqwrapper.SubscriptionInitialPosition)) *MsgStream_AsConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// AsProducer provides a mock function with given fields: channels
func (_m *MsgStream) AsProducer(channels []string) {
	_m.Called(channels)
}

// MsgStream_AsProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsProducer'
type MsgStream_AsProducer_Call struct {
	*mock.Call
}

// AsProducer is a helper method to define mock.On call
//   - channels []string
func (_e *MsgStream_Expecter) AsProducer(channels interface{}) *MsgStream_AsProducer_Call {
	return &MsgStream_AsProducer_Call{Call: _e.mock.On("AsProducer", channels)}
}

func (_c *MsgStream_AsProducer_Call) Run(run func(channels []string)) *MsgStream_AsProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MsgStream_AsProducer_Call) Return() *MsgStream_AsProducer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_AsProducer_Call) RunAndReturn(run func([]string)) *MsgStream_AsProducer_Call {
	_c.Call.Return(run)
	return _c
}

// Broadcast provides a mock function with given fields: _a0
func (_m *MsgStream) Broadcast(_a0 *msgstream.MsgPack) (map[string][]mqwrapper.MessageID, error) {
	ret := _m.Called(_a0)

	var r0 map[string][]mqwrapper.MessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(*msgstream.MsgPack) (map[string][]mqwrapper.MessageID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*msgstream.MsgPack) map[string][]mqwrapper.MessageID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]mqwrapper.MessageID)
		}
	}

	if rf, ok := ret.Get(1).(func(*msgstream.MsgPack) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MsgStream_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MsgStream_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - _a0 *msgstream.MsgPack
func (_e *MsgStream_Expecter) Broadcast(_a0 interface{}) *MsgStream_Broadcast_Call {
	return &MsgStream_Broadcast_Call{Call: _e.mock.On("Broadcast", _a0)}
}

func (_c *MsgStream_Broadcast_Call) Run(run func(_a0 *msgstream.MsgPack)) *MsgStream_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*msgstream.MsgPack))
	})
	return _c
}

func (_c *MsgStream_Broadcast_Call) Return(_a0 map[string][]mqwrapper.MessageID, _a1 error) *MsgStream_Broadcast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MsgStream_Broadcast_Call) RunAndReturn(run func(*msgstream.MsgPack) (map[string][]mqwrapper.MessageID, error)) *MsgStream_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// Chan provides a mock function with given fields:
func (_m *MsgStream) Chan() <-chan *msgstream.MsgPack {
	ret := _m.Called()

	var r0 <-chan *msgstream.MsgPack
	if rf, ok := ret.Get(0).(func() <-chan *msgstream.MsgPack); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *msgstream.MsgPack)
		}
	}

	return r0
}

// MsgStream_Chan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chan'
type MsgStream_Chan_Call struct {
	*mock.Call
}

// Chan is a helper method to define mock.On call
func (_e *MsgStream_Expecter) Chan() *MsgStream_Chan_Call {
	return &MsgStream_Chan_Call{Call: _e.mock.On("Chan")}
}

func (_c *MsgStream_Chan_Call) Run(run func()) *MsgStream_Chan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgStream_Chan_Call) Return(_a0 <-chan *msgstream.MsgPack) *MsgStream_Chan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgStream_Chan_Call) RunAndReturn(run func() <-chan *msgstream.MsgPack) *MsgStream_Chan_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MsgStream) Close() {
	_m.Called()
}

// MsgStream_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MsgStream_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MsgStream_Expecter) Close() *MsgStream_Close_Call {
	return &MsgStream_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MsgStream_Close_Call) Run(run func()) *MsgStream_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgStream_Close_Call) Return() *MsgStream_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_Close_Call) RunAndReturn(run func()) *MsgStream_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestMsgID provides a mock function with given fields: channel
func (_m *MsgStream) GetLatestMsgID(channel string) (mqwrapper.MessageID, error) {
	ret := _m.Called(channel)

	var r0 mqwrapper.MessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (mqwrapper.MessageID, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(string) mqwrapper.MessageID); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqwrapper.MessageID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MsgStream_GetLatestMsgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestMsgID'
type MsgStream_GetLatestMsgID_Call struct {
	*mock.Call
}

// GetLatestMsgID is a helper method to define mock.On call
//   - channel string
func (_e *MsgStream_Expecter) GetLatestMsgID(channel interface{}) *MsgStream_GetLatestMsgID_Call {
	return &MsgStream_GetLatestMsgID_Call{Call: _e.mock.On("GetLatestMsgID", channel)}
}

func (_c *MsgStream_GetLatestMsgID_Call) Run(run func(channel string)) *MsgStream_GetLatestMsgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MsgStream_GetLatestMsgID_Call) Return(_a0 mqwrapper.MessageID, _a1 error) *MsgStream_GetLatestMsgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MsgStream_GetLatestMsgID_Call) RunAndReturn(run func(string) (mqwrapper.MessageID, error)) *MsgStream_GetLatestMsgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduceChannels provides a mock function with given fields:
func (_m *MsgStream) GetProduceChannels() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MsgStream_GetProduceChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduceChannels'
type MsgStream_GetProduceChannels_Call struct {
	*mock.Call
}

// GetProduceChannels is a helper method to define mock.On call
func (_e *MsgStream_Expecter) GetProduceChannels() *MsgStream_GetProduceChannels_Call {
	return &MsgStream_GetProduceChannels_Call{Call: _e.mock.On("GetProduceChannels")}
}

func (_c *MsgStream_GetProduceChannels_Call) Run(run func()) *MsgStream_GetProduceChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgStream_GetProduceChannels_Call) Return(_a0 []string) *MsgStream_GetProduceChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgStream_GetProduceChannels_Call) RunAndReturn(run func() []string) *MsgStream_GetProduceChannels_Call {
	_c.Call.Return(run)
	return _c
}

// Produce provides a mock function with given fields: _a0
func (_m *MsgStream) Produce(_a0 *msgstream.MsgPack) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*msgstream.MsgPack) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgStream_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type MsgStream_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - _a0 *msgstream.MsgPack
func (_e *MsgStream_Expecter) Produce(_a0 interface{}) *MsgStream_Produce_Call {
	return &MsgStream_Produce_Call{Call: _e.mock.On("Produce", _a0)}
}

func (_c *MsgStream_Produce_Call) Run(run func(_a0 *msgstream.MsgPack)) *MsgStream_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*msgstream.MsgPack))
	})
	return _c
}

func (_c *MsgStream_Produce_Call) Return(_a0 error) *MsgStream_Produce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgStream_Produce_Call) RunAndReturn(run func(*msgstream.MsgPack) error) *MsgStream_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: offset
func (_m *MsgStream) Seek(offset []*msgpb.MsgPosition) error {
	ret := _m.Called(offset)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*msgpb.MsgPosition) error); ok {
		r0 = rf(offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgStream_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type MsgStream_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - offset []*msgpb.MsgPosition
func (_e *MsgStream_Expecter) Seek(offset interface{}) *MsgStream_Seek_Call {
	return &MsgStream_Seek_Call{Call: _e.mock.On("Seek", offset)}
}

func (_c *MsgStream_Seek_Call) Run(run func(offset []*msgpb.MsgPosition)) *MsgStream_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*msgpb.MsgPosition))
	})
	return _c
}

func (_c *MsgStream_Seek_Call) Return(_a0 error) *MsgStream_Seek_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgStream_Seek_Call) RunAndReturn(run func([]*msgpb.MsgPosition) error) *MsgStream_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// SetRepackFunc provides a mock function with given fields: repackFunc
func (_m *MsgStream) SetRepackFunc(repackFunc msgstream.RepackFunc) {
	_m.Called(repackFunc)
}

// MsgStream_SetRepackFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRepackFunc'
type MsgStream_SetRepackFunc_Call struct {
	*mock.Call
}

// SetRepackFunc is a helper method to define mock.On call
//   - repackFunc msgstream.RepackFunc
func (_e *MsgStream_Expecter) SetRepackFunc(repackFunc interface{}) *MsgStream_SetRepackFunc_Call {
	return &MsgStream_SetRepackFunc_Call{Call: _e.mock.On("SetRepackFunc", repackFunc)}
}

func (_c *MsgStream_SetRepackFunc_Call) Run(run func(repackFunc msgstream.RepackFunc)) *MsgStream_SetRepackFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(msgstream.RepackFunc))
	})
	return _c
}

func (_c *MsgStream_SetRepackFunc_Call) Return() *MsgStream_SetRepackFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_SetRepackFunc_Call) RunAndReturn(run func(msgstream.RepackFunc)) *MsgStream_SetRepackFunc_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMsgStream interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgStream creates a new instance of MsgStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgStream(t mockConstructorTestingTNewMsgStream) *MsgStream {
	mock := &MsgStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
