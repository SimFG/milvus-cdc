// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	"github.com/zilliztech/milvus-cdc/core/util"

	mock "github.com/stretchr/testify/mock"
	writer "github.com/zilliztech/milvus-cdc/core/writer"
)

// MilvusClientFactory is an autogenerated mock type for the MilvusClientFactory type
type MilvusClientFactory struct {
	util.CDCMark
	mock.Mock
}

// NewGrpcClient provides a mock function with given fields: ctx, addr
func (_m *MilvusClientFactory) NewGrpcClient(ctx context.Context, addr string) (writer.MilvusClientAPI, error) {
	ret := _m.Called(ctx, addr)

	var r0 writer.MilvusClientAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (writer.MilvusClientAPI, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) writer.MilvusClientAPI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writer.MilvusClientAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGrpcClientWithAuth provides a mock function with given fields: ctx, addr, username, password
func (_m *MilvusClientFactory) NewGrpcClientWithAuth(ctx context.Context, addr string, username string, password string) (writer.MilvusClientAPI, error) {
	ret := _m.Called(ctx, addr, username, password)

	var r0 writer.MilvusClientAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (writer.MilvusClientAPI, error)); ok {
		return rf(ctx, addr, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) writer.MilvusClientAPI); ok {
		r0 = rf(ctx, addr, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writer.MilvusClientAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, addr, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGrpcClientWithTLSAuth provides a mock function with given fields: ctx, addr, username, password
func (_m *MilvusClientFactory) NewGrpcClientWithTLSAuth(ctx context.Context, addr string, username string, password string) (writer.MilvusClientAPI, error) {
	ret := _m.Called(ctx, addr, username, password)

	var r0 writer.MilvusClientAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (writer.MilvusClientAPI, error)); ok {
		return rf(ctx, addr, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) writer.MilvusClientAPI); ok {
		r0 = rf(ctx, addr, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writer.MilvusClientAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, addr, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// cdc provides a mock function with given fields:
func (_m *MilvusClientFactory) cdc() {
	_m.Called()
}

type mockConstructorTestingTNewMilvusClientFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMilvusClientFactory creates a new instance of MilvusClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMilvusClientFactory(t mockConstructorTestingTNewMilvusClientFactory) *MilvusClientFactory {
	mock := &MilvusClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
