// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MetaStore is an autogenerated mock type for the MetaStore type
type MetaStore[M interface{}] struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, metaObj, txn
func (_m *MetaStore[M]) Delete(ctx context.Context, metaObj M, txn interface{}) error {
	ret := _m.Called(ctx, metaObj, txn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) error); ok {
		r0 = rf(ctx, metaObj, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, metaObj, txn
func (_m *MetaStore[M]) Get(ctx context.Context, metaObj M, txn interface{}) ([]M, error) {
	ret := _m.Called(ctx, metaObj, txn)

	var r0 []M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) ([]M, error)); ok {
		return rf(ctx, metaObj, txn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) []M); ok {
		r0 = rf(ctx, metaObj, txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, M, interface{}) error); ok {
		r1 = rf(ctx, metaObj, txn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, metaObj, txn
func (_m *MetaStore[M]) Put(ctx context.Context, metaObj M, txn interface{}) error {
	ret := _m.Called(ctx, metaObj, txn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) error); ok {
		r0 = rf(ctx, metaObj, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMetaStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetaStore creates a new instance of MetaStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetaStore[M interface{}](t mockConstructorTestingTNewMetaStore) *MetaStore[M] {
	mock := &MetaStore[M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
