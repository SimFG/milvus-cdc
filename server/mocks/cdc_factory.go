// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	reader "github.com/zilliztech/milvus-cdc/core/reader"

	writer "github.com/zilliztech/milvus-cdc/core/writer"
)

// CDCFactory is an autogenerated mock type for the CDCFactory type
type CDCFactory struct {
	mock.Mock
}

type CDCFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *CDCFactory) EXPECT() *CDCFactory_Expecter {
	return &CDCFactory_Expecter{mock: &_m.Mock}
}

// NewReader provides a mock function with given fields:
func (_m *CDCFactory) NewReader() (reader.CDCReader, error) {
	ret := _m.Called()

	var r0 reader.CDCReader
	var r1 error
	if rf, ok := ret.Get(0).(func() (reader.CDCReader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() reader.CDCReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reader.CDCReader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CDCFactory_NewReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewReader'
type CDCFactory_NewReader_Call struct {
	*mock.Call
}

// NewReader is a helper method to define mock.On call
func (_e *CDCFactory_Expecter) NewReader() *CDCFactory_NewReader_Call {
	return &CDCFactory_NewReader_Call{Call: _e.mock.On("NewReader")}
}

func (_c *CDCFactory_NewReader_Call) Run(run func()) *CDCFactory_NewReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CDCFactory_NewReader_Call) Return(_a0 reader.CDCReader, _a1 error) *CDCFactory_NewReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CDCFactory_NewReader_Call) RunAndReturn(run func() (reader.CDCReader, error)) *CDCFactory_NewReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter provides a mock function with given fields:
func (_m *CDCFactory) NewWriter() (writer.CDCWriter, error) {
	ret := _m.Called()

	var r0 writer.CDCWriter
	var r1 error
	if rf, ok := ret.Get(0).(func() (writer.CDCWriter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() writer.CDCWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(writer.CDCWriter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CDCFactory_NewWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWriter'
type CDCFactory_NewWriter_Call struct {
	*mock.Call
}

// NewWriter is a helper method to define mock.On call
func (_e *CDCFactory_Expecter) NewWriter() *CDCFactory_NewWriter_Call {
	return &CDCFactory_NewWriter_Call{Call: _e.mock.On("NewWriter")}
}

func (_c *CDCFactory_NewWriter_Call) Run(run func()) *CDCFactory_NewWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CDCFactory_NewWriter_Call) Return(_a0 writer.CDCWriter, _a1 error) *CDCFactory_NewWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CDCFactory_NewWriter_Call) RunAndReturn(run func() (writer.CDCWriter, error)) *CDCFactory_NewWriter_Call {
	_c.Call.Return(run)
	return _c
}

// cdc provides a mock function with given fields:
func (_m *CDCFactory) cdc() {
	_m.Called()
}

// CDCFactory_cdc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'cdc'
type CDCFactory_cdc_Call struct {
	*mock.Call
}

// cdc is a helper method to define mock.On call
func (_e *CDCFactory_Expecter) cdc() *CDCFactory_cdc_Call {
	return &CDCFactory_cdc_Call{Call: _e.mock.On("cdc")}
}

func (_c *CDCFactory_cdc_Call) Run(run func()) *CDCFactory_cdc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CDCFactory_cdc_Call) Return() *CDCFactory_cdc_Call {
	_c.Call.Return()
	return _c
}

func (_c *CDCFactory_cdc_Call) RunAndReturn(run func()) *CDCFactory_cdc_Call {
	_c.Call.Return(run)
	return _c
}

// NewCDCFactory creates a new instance of CDCFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCDCFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *CDCFactory {
	mock := &CDCFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
